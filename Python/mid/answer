#1
class Library:
  book.list = []
  def __init__(self):
      pass
  def entry_book(self, book):
     return self.book_list


book = Library("cse")
print(book.book_list)


#2
class Book:
  def __init__(self, book_id, title, author, availability=True):
     self.book_id = book_id
     self.title = title
     self.author = author
     self.availability = availability


#3
class Book:
    book_list = []
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability


    def entry_book(self):
        Book.book_list.append(self)


book1 = Book(101, "CSE", "ami")
book1.entry_book()
print(f"ID: {book.book_id}, Title: {book.title}, Author: {book.author},   Available: {book.availability}")




#4
class Book:
  def __init__(self, book_id, title, author, availability=True):
     self.book_id = book_id
     self.title = title
     self.author = author
     self.availability = availability
  def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f"Book '{self.title}' has been borrowed.")
            return True
        else:
            print(f"Book '{self.title}' is not available for borrowing.")
            return False
           
book_1 = Book(101, "CSE", "ami", availability=True)
book_2 = Book(102, "EEE", "tumi", availability=False)


print(book_1.borrow_book())
print(book_2.borrow_book())




#5
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability
   
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f"Book '{self.title}' has been borrowed.")
            return True
        else:
            print(f"Book '{self.title}' is not available for borrowing.")
            return False
   
    def return_book(self):
        if not self.availability:
            self.availability = True
            print(f"Book '{self.title}' has been returned.")
            return True
        else:
            print(f"Book '{self.title}' was already available.")
            return False
           
book_1 = Book(101, "CSE", "ami", availability=True)
book_2 = Book(102, "EEE", "tumi", availability=False)


print(book_1.borrow_book())
print(book_2.borrow_book())


print(book_1.return_book())
print(book_2.return_book())


#6
class Book:
    def __init__(self, book_id, title, author, availability = True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability


    def view_book_info(self):
        print(f"book_id: {self.book_id}\ntitle: {self.title}\nauthor:
              {self.author}\navailability: {self.availability}\n")


book = Book(book_id=101, title="Python Programming", author="John Doe",
            availability = True)
book.view_book_info()








#7
class Library:
    def __init__(self):
        self.books = ["Book A", "Book B", "Book C"]
        self.borrowed_books = []


    def view_all_books(self):
        print("\nList of Books:")
        for book in self.books:
            print(f"- {book}")
        print()


    def borrow_book(self):
        print("\nAvailable Books to Borrow:")
        for i, book in enumerate(self.books):
            if book not in self.borrowed_books:
                print(f"{i + 1}. {book}")
        choice = int(input("Select a book number to borrow: ")) - 1
        if 0 <= choice < len(self.books) and self.books[choice] not in self.borrowed_books:
            self.borrowed_books.append(self.books[choice])
            print(f"You have borrowed '{self.books[choice]}'\n")
        else:
            print("Invalid choice or book already borrowed.\n")


    def return_book(self):
        print("\nBorrowed Books:")
        for i, book in enumerate(self.borrowed_books):
            print(f"{i + 1}. {book}")
        choice = int(input("Select a book number to return: ")) - 1
        if 0 <= choice < len(self.borrowed_books):
            returned_book = self.borrowed_books.pop(choice)
            print(f"You have returned '{returned_book}'\n")
        else:
            print("Invalid choice.\n")
def main():
    library = Library()


    while True:
        print("Menu:")
        print("1. View All Books")
        print("2. Borrow Book")
        print("3. Return Book")
        print("4. Exit")
       
        choice = input("Enter your choice: ")
       
        if choice == "1":
            library.view_all_books()
        elif choice == "2":
            library.borrow_book()
        elif choice == "3":
            library.return_book()
        elif choice == "4":
            print("Exiting the system. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.\n")
if __name__ == "__main__":
    main()




#8
class Library:
    def __init__(self):
        self.borrowed_books = {}


    def borrow_book(self, book_id):
        if not isinstance(book_id, int) or book_id < 1:
            print("Invalid book ID.")
            return


        if book_id in self.borrowed_books:
            print("Book is already borrowed.")
            return


        self.borrowed_books[book_id] = True
        print(f"Book {book_id} borrowed successfully.")


    def return_book(self, book_id):
        if not isinstance(book_id, int) or book_id < 1:
            print("Invalid book ID.")
            return


        if book_id not in self.borrowed_books:
            print("Book is not borrowed or invalid return attempt.")
            return


        del self.borrowed_books[book_id]
        print(f"Book {book_id} returned successfully.")




library = Library()


library.borrow_book(1)
library.borrow_book(1)


library.return_book(1)
library.return_book(1)


library.borrow_book(-5)
library.return_book(-10)




#9
class Book:
    def __init__(self, book_id, title, author, availability):
        self.__book_id = book_id    
        self.__title = title        
        self.__author = author        
        self.__availability = availability


    def get_book_id(self):
        return self.__book_id


    def get_title(self):
        return self.__title


    def get_author(self):
        return self.__author


    def is_available(self):
        return self.__availability


    def set_availability(self, availability):
        self.__availability = availability


book = Book(101, "1111", "ami", True)
print(f"Book ID: {book.get_book_id()}")
print(f"Title: {book.get_title()}")
print(f"Author: {book.get_author()}")
print(f"Available: {book.is_available()}")
